@page "/"
@using ClosedXML.Excel
@inject IJSRuntime JS

<PageTitle>ExcelJson変換君</PageTitle>
<h2>Excel(.xlsx) => JSON</h2>

<h3>Step.1 Excel(.xlsx)ファイルを選択</h3>
<p>当システムは全て利用者のブラウザ上のみで完結しているためExcelファイルをサーバーに送信等は行っていません。</p>
<InputFile OnChange="LoadFile" />
@if (fileOpenStatus != null)
{
    <p>@fileOpenStatus</p>
}
@if (step > 0)
{
    <h3>Step.2 変換するシートの選択</h3>
    <select @bind="@selectedSheetName">
    @foreach (var sheet in worksheets)
        {
            <option value="@sheet.Name">@sheet.Name</option>
        }
    </select>
    <p>@selectedSheetName シートをJSONで変換します</p>
    <button @onclick="@GoToStep3">次のStepへ（型の確認）</button>
    @if (step > 1)
    {
        <h3>Step.3 型の確認</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">列名</th>
                    <th scope="col">型</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in typeList)
                {
                    <tr>
                        <th>@row.name</th>
                        <th>
                            <select @bind="@row.typeStr">
                                @foreach (var type in Enum.GetNames(typeof(Type)))
                                {
                                    <option value=@type>@type</option>
                                }
                            </select>
                        </th>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="GenerateJson">JSON生成</button>
        @if(step > 2)
        {
            <p>@generateJosnMsg</p>
        }
        @if(step > 3)
        {
            <h3>JSON</h3>
            <button @onclick="CopyJsonToClipboard">生成結果をｸﾘｯﾌﾟﾎﾞｰﾄﾞへｺﾋﾟｰ</button>
            <pre>
                <code>
                    @generatedJson
                </code>
            </pre>
        }
    }
}



@code {
    XLWorkbook? targetBook;
    IXLWorksheet? targetWorkSheet;
    List<IXLWorksheet> worksheets = new();
    string? selectedSheetName { get; set; }
    int step = 0;
    string? fileOpenStatus;
    List<RowType> typeList = new();
    string generatedJson = "";
    string generateJosnMsg = "";


    async Task LoadFile(InputFileChangeEventArgs e)
    {
        fileOpenStatus = "Now Loading";
        var file = e.GetMultipleFiles(1);
        byte[] buffer = new byte[file[0].Size];
        await file[0].OpenReadStream().ReadAsync(buffer);
        MemoryStream stream = new MemoryStream(buffer);
        try
        {
            var book = new XLWorkbook(stream);
            targetBook = book;
            step = 1;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            fileOpenStatus = "ファイルオープンに失敗しました。";
        }

        foreach (var sheet in targetBook.Worksheets)
        {
            worksheets.Add(sheet);
            Console.WriteLine(sheet.Name);
        }
        selectedSheetName = worksheets[0].Name;
        StateHasChanged();
    }
    void GoToStep3()
    {
        typeList.Clear();
        if (targetBook == null || selectedSheetName == null) return;
        if (targetBook.Worksheets.Select(tb => tb.Name).ToList().IndexOf(selectedSheetName) == -1) return;
        targetWorkSheet = targetBook.Worksheet(selectedSheetName);
        if (targetWorkSheet == null) return;
        int col = 1;

        while(true)
        {
            IXLCell topCell = targetWorkSheet.Cell(1, col);
            IXLCell valueCell = targetWorkSheet.Cell(2, col);
            if (topCell.IsEmpty()) break;
            Type type = Type.文字型;
            switch (valueCell.DataType)
            {
                case XLDataType.Text:
                    type = Type.文字型;
                    break;
                case XLDataType.Boolean:
                    type = Type.真偽値;
                    break;
                case XLDataType.Number:
                    type = Type.数値型;
                    break;
            }
            RowType rowType = new() { name = topCell.GetString(), type = type };
            typeList.Add(rowType);
            col++;
        }
        step = 2;
        StateHasChanged();
    }
    string FormatCell(IXLCell cell, RowType rowType)
    {
        switch (rowType.type)
        {
            case Type.数値型:
                return cell.GetString();
            case Type.真偽値:
                return cell.GetBoolean() ? "true" : "false";
            case Type.文字型:
                return $"\"{cell.GetString()}\"";
            default:
                return $"\"{cell.GetString()}\"";
        }
    }
    async void GenerateJson()
    {
        step = 3;
        generateJosnMsg = $"JSONを生成中";
        StateHasChanged();

        await Task.Run(() =>
        {
            string json = "[\n";
            for(int r = 2; true; r++)
            {
                generateJosnMsg = $"{r}行目を処理中";
                StateHasChanged();
                json += "    {\n";
                for(int c = 1; c <= typeList.Count(); c++)
                {
                    json += $"        \"{typeList[c - 1].name}\":{FormatCell(targetWorkSheet.Cell(r, c), typeList[c - 1])}";
                    json += c == typeList.Count() ? "\n" : ",\n";
                }
                if (targetWorkSheet.Cell(r + 1, 1).IsEmpty())
                {
                    json += "    }\n";
                    break;
                }
                else
                {
                    json += "    },\n";
                }
            }
            json += "]\n";
            generatedJson = json;
        });

        generateJosnMsg = "生成完了";
        step = 4;
        StateHasChanged();
    }
    async void CopyJsonToClipboard()
    {
        await JS.InvokeVoidAsync("copyToCB", generatedJson);
    }
    public enum Type{
        文字型,
        数値型,
        真偽値
    }
    class RowType
    {
        public string name { get; set; }
        public Type type 
        { 
            get => Enum.Parse<Type>(typeStr);
            set {
                typeStr = value.ToString();
            }
        }
        public string typeStr { get; set; }
    }
}